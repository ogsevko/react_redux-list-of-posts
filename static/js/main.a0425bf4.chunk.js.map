{"version":3,"sources":["store/loading.ts","store/message.ts","store/postsReducer.ts","store/query.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/CommentList.tsx","components/UserItem.tsx","components/PostItem.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","message","setPosts","payload","posts","query","value","getData","API","fetch","then","response","json","rootReducer","combineReducers","loadingReducer","messageReducer","postsReducer","queryReducer","isLoading","state","getMessage","getPosts","getQuery","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","onClick","a","users","comments","disabled","CommentList","className","map","comment","key","id","name","body","email","UserItem","user","Object","values","address","slice","length","join","PostItem","post","preparedPosts","title","newPosts","filter","item","handleClick","PostsList","filteredPosts","pattern","RegExp","test","userCopy","find","userId","filteredComments","postId","App","onChange","event","target","setQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0425bf4.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Posts } from '../components/Interfaces';\n\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = (payload: Posts) => ({ type: SET_POSTS, payload });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.payload;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (value: string) => ({ type: SET_QUERY, value });\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.value;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","export function getData <T>(API: string): Promise<T[]> {\n  return fetch(API)\n    .then(response => response.json());\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPosts } from './postsReducer';\nimport queryReducer from './query';\nimport { Post, User, Comment } from '../components/Interfaces';\nimport { getData } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\n\nconst API = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const posts: Post[] = await getData(`${API}posts.json`);\n      const users: User[] = await getData(`${API}users.json`);\n      const comments: Comment[] = await getData(`${API}comments.json`);\n\n      dispatch(setPosts({\n        posts,\n        users,\n        comments,\n      }));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadPosts } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { Comment } from './Interfaces';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"comment-list\">\n    <h3>Comments:</h3>\n    {\n      comments.map(comment => (\n        <li key={comment.id} className=\"comment-list__item\">\n          <h4>{comment.name}</h4>\n          <p>{comment.body}</p>\n          <span>{comment.email}</span>\n        </li>\n      ))\n    }\n  </ul>\n);\n","import React from 'react';\nimport { User } from './Interfaces';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserItem: React.FC<Props> = ({ user }) => (\n  <div key={user.id} className=\"post__user\">\n    <span>{`${user.name} | `}</span>\n    <span>{`${user.email} | `}</span>\n    <span>\n      {\n        Object.values(user.address)\n          .slice(0, Object.values(user.address).length - 2)\n          .join(', ')\n      }\n    </span>\n  </div>\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPosts } from '../store';\nimport { setPosts } from '../store/postsReducer';\nimport { User, Post, Comment } from './Interfaces';\nimport { CommentList } from './CommentList';\nimport { UserItem } from './UserItem';\n\ninterface Props {\n  comments: Comment[];\n  user: User;\n  post: Post;\n}\n\nexport const PostItem: React.FC<Props> = ({ comments, user, post }) => {\n  const dispatch = useDispatch();\n  const preparedPosts = useSelector(getPosts);\n\n  const handleClick = (id: number) => {\n    const newPosts = {\n      posts: preparedPosts.posts\n        .filter((item: Post) => item.id !== id),\n      users: [...preparedPosts.users],\n      comments: [...preparedPosts.comments],\n    };\n\n    dispatch(setPosts(newPosts));\n  };\n\n  return (\n    <li className=\"post\">\n      <h1>\n        {post.title}\n      </h1>\n      <button\n        type=\"button\"\n        onClick={() => handleClick(post.id)}\n      >\n        Delete\n      </button>\n      <p>\n        {post.body}\n      </p>\n      <UserItem user={user} />\n      <CommentList comments={comments} />\n    </li>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getPosts, getQuery } from '../store';\nimport {\n  User, Post, Comment, Posts,\n} from './Interfaces';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: React.FC = () => {\n  const preparedPosts: Posts = useSelector(getPosts);\n  const query: string = useSelector(getQuery);\n  let filteredPosts: Posts;\n\n  if (query !== '') {\n    const pattern = new RegExp(query, 'ig');\n\n    filteredPosts = {\n      posts: preparedPosts.posts\n        .filter((post: Post) => pattern.test(post.title) || pattern.test(post.body)),\n      users: [...preparedPosts.users],\n      comments: [...preparedPosts.comments],\n    };\n  } else {\n    filteredPosts = { ...preparedPosts };\n  }\n\n  return (\n    <ul className=\"post-list\">\n      {\n        filteredPosts.posts.map((post: Post) => {\n          const userCopy = preparedPosts.users\n            .find((user: User) => user.id === post.userId) as User;\n\n          const filteredComments = preparedPosts.comments\n            .filter((comment: Comment) => comment.postId === post.id);\n\n          return (\n            <PostItem\n              key={post.id}\n              comments={filteredComments}\n              user={userCopy}\n              post={post}\n            />\n          );\n        })\n      }\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport {\n  isLoading, getMessage, getPosts, getQuery,\n} from './store';\nimport { PostsList } from './components/PostList';\nimport { setQuery } from './store/query';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n  const preparedPosts = useSelector(getPosts);\n  const query = useSelector(getQuery);\n\n  const handleChange = (value: string) => {\n    dispatch(setQuery(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n\n      {\n        preparedPosts.posts\n          ? (\n            <>\n              <span>Search:</span>\n              <input\n                type=\"text\"\n                value={query}\n                onChange={(event) => handleChange(event.target.value)}\n              />\n              <PostsList />\n            </>\n          )\n          : (\n            <Start />\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}